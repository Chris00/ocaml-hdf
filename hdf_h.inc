typedef enum { DFACC_READ = _DFACC_READ, DFACC_WRITE = _DFACC_WRITE, DFACC_CREATE = _DFACC_CREATE, } access_type;
typedef enum { AN_UNDEF = -1, AN_DATA_LABEL = 0, AN_DATA_DESC, AN_FILE_LABEL, AN_FILE_DESC } ann_type;
typedef int32 HFILEID;
typedef enum { COMP_MODEL_STDIO = 0 } comp_model_t;
typedef enum { COMP_CODE_NONE = 0, COMP_CODE_RLE, COMP_CODE_NBIT, COMP_CODE_SKPHUFF, COMP_CODE_DEFLATE, COMP_CODE_SZIP, COMP_CODE_INVALID, COMP_CODE_JPEG } comp_coder_t;
typedef enum { DFE_NONE = 0, DFE_FNF, DFE_DENIED, DFE_ALROPEN, DFE_TOOMANY, DFE_BADNAME, DFE_BADACC, DFE_BADOPEN, DFE_NOTOPEN, DFE_CANTCLOSE, DFE_READERROR, DFE_WRITEERROR, DFE_SEEKERROR, DFE_RDONLY, DFE_BADSEEK, DFE_PUTELEM, DFE_GETELEM, DFE_CANTLINK, DFE_CANTSYNC, DFE_BADGROUP, DFE_GROUPSETUP, DFE_PUTGROUP, DFE_GROUPWRITE, DFE_DFNULL, DFE_ILLTYPE, DFE_BADDDLIST, DFE_NOTDFFILE, DFE_SEEDTWICE, DFE_NOSUCHTAG, DFE_NOFREEDD, DFE_BADTAG, DFE_BADREF, DFE_NOMATCH, DFE_NOTINSET, DFE_BADOFFSET, DFE_CORRUPT, DFE_NOREF, DFE_DUPDD, DFE_CANTMOD, DFE_DIFFFILES, DFE_BADAID, DFE_OPENAID, DFE_CANTFLUSH, DFE_CANTUPDATE, DFE_CANTHASH, DFE_CANTDELDD, DFE_CANTDELHASH, DFE_CANTACCESS, DFE_CANTENDACCESS, DFE_TABLEFULL, DFE_NOTINTABLE, DFE_UNSUPPORTED, DFE_NOSPACE, DFE_BADCALL, DFE_BADPTR, DFE_BADLEN, DFE_NOTENOUGH, DFE_NOVALS, DFE_ARGS, DFE_INTERNAL, DFE_NORESET, DFE_GENAPP, DFE_UNINIT, DFE_CANTINIT, DFE_CANTSHUTDOWN, DFE_BADDIM, DFE_BADFP, DFE_BADDATATYPE, DFE_BADMCTYPE, DFE_BADNUMTYPE, DFE_BADORDER, DFE_RANGE, DFE_BADCONV, DFE_BADTYPE, DFE_BADSCHEME, DFE_BADMODEL, DFE_BADCODER, DFE_MODEL, DFE_CODER, DFE_CINIT, DFE_CDECODE, DFE_CENCODE, DFE_CTERM, DFE_CSEEK, DFE_MINIT, DFE_COMPINFO, DFE_CANTCOMP, DFE_CANTDECOMP, DFE_NOENCODER, DFE_NODIM, DFE_BADRIG, DFE_RINOTFOUND, DFE_BADATTR, DFE_LUTNOTFOUND, DFE_BADTABLE, DFE_BADSDG, DFE_BADNDG, DFE_VGSIZE, DFE_VTAB, DFE_CANTADDELEM, DFE_BADVGNAME, DFE_BADVGCLASS, DFE_BADFIELDS, DFE_NOVS, DFE_SYMSIZE, DFE_BADATTACH, DFE_BADVSNAME, DFE_BADVSCLASS, DFE_VSWRITE, DFE_VSREAD, DFE_BADVH, DFE_FIELDSSET, DFE_VSCANTCREATE, DFE_VGCANTCREATE, DFE_CANTATTACH, DFE_CANTDETACH, DFE_BITREAD, DFE_BITWRITE, DFE_BITSEEK, DFE_TBBTINS, DFE_BVNEW, DFE_BVSET, DFE_BVGET, DFE_BVFIND } hdf_err_code_t;
typedef struct { struct { intn skp_size;
} skphuff;
struct { intn level;
} deflate;
} comp_info;
[mlname(h_open)] int32 Hopen ( [string] const char * path, access_type acc_mode, int16 ndds );
[mlname(h_close)] HDF_RESULT Hclose ( int32 file_id );
[mlname(h_ishdf)] intn Hishdf ( [string] const char * filename );
[mlname(he_string), string, length_is(1024)] const char * HEstring ( hdf_err_code_t error_code );
[mlname(he_value)] hdf_err_code_t HEvalue ( int32 level );
[mlname(hep_clear)] void HEPclear ( void );
[mlname(v_nattrs)] intn Vnattrs ( int32 vgid );
[mlname(v_findattr)] intn Vfindattr ( int32 vgid, [string] const char * attrname );
[mlname(v_attrinfo)] intn Vattrinfo ( int32 vgid, intn attrindex, [string, out, length_is(1024)] char * name, [out] int32 * datatype, [out] int32 * count, [out] int32 * size );
[mlname(v_getversion)] int32 Vgetversion ( int32 vgid );
[mlname(vs_findex)] HDF_RESULT VSfindex ( int32 vsid, [string] const char * fieldname, int32 * fldindex );
[mlname(vs_nattrs)] intn VSnattrs ( int32 vsid );
[mlname(vs_fnattrs)] intn VSfnattrs ( int32 vsid, int32 findex );
[mlname(vs_findattr)] intn VSfindattr ( int32 vsid, int32 findex, [string] const char * attrname );
[mlname(vs_attrinfo)] HDF_RESULT VSattrinfo ( int32 vsid, int32 findex, intn attrindex, [string, out, length_is(1024)] char * name, [out] int32 * datatype, [out] int32 * count, [out] int32 * size );
[mlname(vs_isattr)] intn VSisattr ( int32 vsid );
int32 vicheckcompat ( HFILEID f );
int32 vimakecompat ( HFILEID f );
int32 vcheckcompat ( [string] char * fs );
int32 vmakecompat ( [string] char * fs );
[mlname(vs_elts)] int32 VSelts ( int32 vkey );
[mlname(vs_getinterlace)] int32 VSgetinterlace ( int32 vkey );
[mlname(vs_setinterlace)] HDF_RESULT VSsetinterlace ( int32 vkey, int32 interlace );
[mlname(vs_getfields)] int32 VSgetfields ( int32 vkey, [string, out, length_is(1024)] char * fields );
[mlname(vs_fexist)] intn VSfexist ( int32 vkey, [string] char * fields );
[mlname(vs_sizeof)] int32 VSsizeof ( int32 vkey, [string] char * fields );
[mlname(vs_dump)] void VSdump ( int32 vkey );
[mlname(vs_setname)] HDF_RESULT VSsetname ( int32 vkey, [string] const char * vsname );
[mlname(vs_setclass)] HDF_RESULT VSsetclass ( int32 vkey, [string] const char * vsclass );
[mlname(vs_getname)] int32 VSgetname ( int32 vkey, [string, out, length_is(1024)] char * vsname );
[mlname(vs_getclass)] HDF_RESULT VSgetclass ( int32 vkey, [string, out, length_is(1024)] char * vsclass );
[mlname(vs_inquire)] HDF_RESULT VSinquire ( int32 vkey, [out] int32 * nelt, [out] int32 * interlace, [string, out, length_is(1024)] char * fields, [out] int32 * eltsize, [string, out, length_is(1024)] char * vsname );
[mlname(vs_lone)] int32 VSlone ( HFILEID f, int32 * idarray, int32 asize );
[mlname(v_lone)] int32 Vlone ( HFILEID f, int32 * idarray, int32 asize );
[mlname(v_find)] int32 Vfind ( HFILEID f, [string] const char * vgname );
[mlname(vs_find)] int32 VSfind ( HFILEID f, [string] const char * vsname );
[mlname(v_findclass)] int32 Vfindclass ( HFILEID f, [string] const char * vgclass );
[mlname(vs_findclass)] int32 VSfindclass ( HFILEID f, [string] const char * vsclass );
[mlname(vs_setblocksize)] intn VSsetblocksize ( int32 vkey, int32 block_size );
[mlname(vs_setnumblocks)] intn VSsetnumblocks ( int32 vkey, int32 num_blocks );
[mlname(vs_getblockinfo)] intn VSgetblockinfo ( int32 vkey, [out] int32 * block_size, [out] int32 * num_blocks );
[mlname(v_setzap)] void Vsetzap ( void );
[mlname(v_initialize)] HDF_RESULT Vinitialize ( HFILEID f );
[mlname(v_finish)] HDF_RESULT Vfinish ( HFILEID f );
[mlname(v_open)] HFILEID Vopen ( [string] char * path, intn acc_mode, int16 ndds );
[mlname(v_close)] intn Vclose ( HFILEID f );
[mlname(v_attach)] int32 Vattach ( HFILEID f, int32 vgid, [string] const char * accesstype );
[mlname(v_detach)] int32 Vdetach ( int32 vkey );
[mlname(v_insert)] int32 Vinsert ( int32 vkey, int32 vskey );
[mlname(v_setname)] int32 Vsetname ( int32 vkey, [string] const char * vgname );
[mlname(v_setclass)] int32 Vsetclass ( int32 vkey, [string] const char * vgclass );
[mlname(v_getid)] int32 Vgetid ( HFILEID f, int32 vgid );
[mlname(v_getnext)] int32 Vgetnext ( int32 vkey, int32 id );
[mlname(v_getname)] int32 Vgetname ( int32 vkey, [string, out, length_is(1024)] char * vgname );
[mlname(v_getclass)] int32 Vgetclass ( int32 vkey, [string, out, length_is(1024)] char * vgclass );
[mlname(v_inquire)] intn Vinquire ( int32 vkey, [out] int32 * nentries, [string, out, length_is(1024)] char * vgname );
[mlname(v_delete)] int32 Vdelete ( int32 f, int32 ref );
[mlname(v_deletetagref)] intn Vdeletetagref ( int32 vkey, int32 tag, int32 ref );
[mlname(vs_attach)] int32 VSattach ( HFILEID f, int32 vsref, [string] const char * accesstype );
[mlname(vs_detach)] HDF_RESULT VSdetach ( int32 vkey );
[mlname(vsq_uerytag)] int32 VSQuerytag ( int32 vkey );
[mlname(vsq_ueryref)] int32 VSQueryref ( int32 vkey );
[mlname(vs_getid)] int32 VSgetid ( HFILEID f, int32 vsref );
[mlname(vs_getversion)] int32 VSgetversion ( int32 vkey );
[mlname(vs_delete)] int32 VSdelete ( int32 f, int32 ref );
[mlname(vs_appendable)] int32 VSappendable ( int32 vkey, int32 blk );
[mlname(vs_setfields)] HDF_RESULT VSsetfields ( int32 vkey, [string] const char * fields );
[mlname(vs_fdefine)] HDF_RESULT VSfdefine ( int32 vkey, [string] const char * field, hdf_data_type localtype, int32 order );
[mlname(vf_nfields)] int32 VFnfields ( int32 vkey );
[mlname(vf_fieldname), string, length_is(1024)] char * VFfieldname ( int32 vkey, int32 idx );
[mlname(vf_fieldtype)] hdf_data_type VFfieldtype ( int32 vkey, int32 idx );
[mlname(vf_fieldisize)] int32 VFfieldisize ( int32 vkey, int32 idx );
[mlname(vf_fieldesize)] int32 VFfieldesize ( int32 vkey, int32 idx );
[mlname(vf_fieldorder)] int32 VFfieldorder ( int32 vkey, int32 idx );
[mlname(vs_setexternalfile)] intn VSsetexternalfile ( int32 vkey, [string] const char * filename, int32 offset );
[mlname(vsp_shutdown)] intn VSPshutdown ( void );
[mlname(vs_seek)] int32 VSseek ( int32 vkey, int32 eltpos );
typedef int16 gr_interlace_t;
