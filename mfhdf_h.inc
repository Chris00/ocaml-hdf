typedef enum { NOT_SDAPI_ID = -1, SD_ID = 0, SDS_ID, DIM_ID } hdf_idtype_t;
[mlname(sd_start)] int32 SDstart ( [string] const char * name, access_type accs );
[mlname(sd_end)] HDF_RESULT SDend ( int32 fid );
[mlname(sd_fileinfo)] HDF_RESULT SDfileinfo ( int32 fid, [out] int32 * datasets, [out] int32 * attrs );
[mlname(sd_select)] int32 SDselect ( int32 fid, int32 idx );
[mlname(sd_getinfo)] HDF_RESULT SDgetinfo ( int32 sdsid, [string, out, length_is(1024)] char * name, [out] int32 * rank, [out, size_is(32)] int32 * dimsizes, [out] int32 * nt, [out] int32 * nattr );
[mlname(sd_nametoindex)] int32 SDnametoindex ( int32 fid, [string] const char * name );
[mlname(sd_create)] int32 SDcreate ( int32 fid, [string] const char * name, hdf_data_type nt, int32 rank, [size_is(rank)] int32 * dimsizes );
[mlname(sd_getdimid)] int32 SDgetdimid ( int32 sdsid, intn number );
[mlname(sd_setdimname)] intn SDsetdimname ( int32 id, [string] const char * name );
[mlname(sd_endaccess)] HDF_RESULT SDendaccess ( int32 id );
[mlname(sd_attrinfo)] intn SDattrinfo ( int32 id, int32 idx, [string, out, length_is(1024)] char * name, [out] int32 * nt, [out] int32 * count );
[mlname(sd_setdatastrs)] intn SDsetdatastrs ( int32 sdsid, [string] const char * l, [string] const char * u, [string] const char * f, [string] const char * c );
[mlname(sd_setcal)] intn SDsetcal ( int32 sdsid, float64 cal, float64 cale, float64 ioff, float64 ioffe, int32 nt );
[mlname(sd_setfillmode)] intn SDsetfillmode ( int32 id, intn fillmode );
[mlname(sd_getdatastrs)] intn SDgetdatastrs ( int32 sdsid, [string, out, length_is(1024)] char * l, [string, out, length_is(1024)] char * u, [string, out, length_is(1024)] char * f, [string, out, length_is(1024)] char * c, intn len );
[mlname(sd_getcal)] intn SDgetcal ( int32 sdsid, [out] float64 * cal, [out] float64 * cale, [out] float64 * ioff, [out] float64 * ioffe, [out] int32 * nt );
[mlname(sd_setdimstrs)] intn SDsetdimstrs ( int32 id, [string] const char * l, [string] const char * u, [string] const char * f );
[mlname(sd_diminfo)] HDF_RESULT SDdiminfo ( int32 id, [string, out, length_is(1024)] char * name, [out] int32 * size, [out] int32 * nt, [out] int32 * nattr );
[mlname(sd_getdimstrs)] intn SDgetdimstrs ( int32 id, [string, out, length_is(1024)] char * l, [string, out, length_is(1024)] char * u, [string, out, length_is(1024)] char * f, intn len );
[mlname(sd_setexternalfile)] intn SDsetexternalfile ( int32 id, [string] const char * filename, int32 offset );
[mlname(sd_setnbitdataset)] intn SDsetnbitdataset ( int32 id, intn start_bit, intn bit_len, intn sign_ext, intn fill_one );
[mlname(sd_findattr)] int32 SDfindattr ( int32 id, [string] const char * attrname );
[mlname(sd_idtoref)] int32 SDidtoref ( int32 id );
[mlname(sd_reftoindex)] int32 SDreftoindex ( int32 fid, int32 ref );
[mlname(sd_isrecord)] int32 SDisrecord ( int32 id );
[mlname(sd_iscoordvar)] intn SDiscoordvar ( int32 id );
[mlname(sd_setaccesstype)] intn SDsetaccesstype ( int32 id, uintn accesstype );
[mlname(sd_setblocksize)] intn SDsetblocksize ( int32 sdsid, int32 block_size );
[mlname(sd_setdimval_comp)] intn SDsetdimval_comp ( int32 dimid, intn compt_mode );
[mlname(sd_isdimval_bwcomp)] intn SDisdimval_bwcomp ( int32 dimid );
[mlname(sd_checkempty)] int32 SDcheckempty ( int32 sdsid, intn * emptySDS );
[mlname(sd_idtype)] hdf_idtype_t SDidtype ( int32 an_id );
[mlname(sd_setchunkcache)] intn SDsetchunkcache ( int32 sdsid, int32 maxcache, int32 flags );
